// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int       @id @default(autoincrement())
  walletAddress String    @unique @map("wallet_address")
  name          String?
  avatarUrl     String?   @map("avatar_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  videos        Video[]
  comments      Comment[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribers   Subscription[] @relation("SubscribedTo")
  likes         VideoLike[]
  
  @@map("users")
}

model Video {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  title         String
  description   String?
  videoUrl      String    @map("video_url")
  thumbnailUrl  String?   @map("thumbnail_url")
  duration      Int       @default(0)
  views         Int       @default(0)
  isShort       Boolean   @default(false) @map("is_short")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         VideoLike[]
  
  @@map("videos")
}

model Comment {
  id        Int      @id @default(autoincrement())
  videoId   Int      @map("video_id")
  userId    Int      @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model VideoLike {
  id        Int      @id @default(autoincrement())
  videoId   Int      @map("video_id")
  userId    Int      @map("user_id")
  isLike    Boolean  @default(true) @map("is_like")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([videoId, userId])
  @@map("video_likes")
}

model Subscription {
  id              Int      @id @default(autoincrement())
  subscriberId    Int      @map("subscriber_id")
  subscribedToId  Int      @map("subscribed_to_id")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  subscriber      User     @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscribedTo    User     @relation("SubscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)
  
  @@unique([subscriberId, subscribedToId])
  @@map("subscriptions")
} 